{"version":3,"sources":["helpers/api.js","components/transaction.js","components/paginatedRows.js","components/block.js","components/blocks.js","App.js","serviceWorker.js","index.js"],"names":["base","postfix","Transaction","props","_props$tx","tx","hash","weight","size","react_default","a","createElement","PaginatedRows","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","perPage","currentPage","goNext","changeCurrentPageByValue","bind","assertThisInitialized","goPrev","val","setState","_this$props","items","itemKey","SubComponent","componentKey","_this$state","maxPages","Math","ceil","length","startIndex","endIndex","Fragment","slice","map","item","index","itemObj","defineProperty","key","colSpan","style","textAlign","disabled","onClick","className","margin","React","Component","Block","details","toggleDetails","_this2","block","objectSpread","transactions","axios","get","then","response","data","getBlockTransactions","txs","_this$props$block","height","tx_count","_this$state$transacti","width","TransactionsHeader","paginatedRows_PaginatedRows","Blocks","blocks","BlocksHeader","block_Block","App","blocks_Blocks","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13831645.chunk.js","sourcesContent":["import axios from \"axios\"\r\nconst base = \"https://blockchain.info/\"\r\nconst postfix = \"?cors=true\"\r\n\r\nexport function getTransaction(id) {\r\n  return axios\r\n    .get(base + \"rawtx/\" + id + postfix)\r\n    .then(response => response.data)\r\n}\r\n\r\nexport function getRecentBlocks() {\r\n  return axios\r\n    .get(base + \"latestblocks\" + postfix)\r\n    .then(response => response.data.blocks)\r\n}\r\n\r\nexport function getBlockTransactions(hash) {\r\n  return axios\r\n    .get(base + \"rawblock/\" + hash + postfix)\r\n    .then(response => response.data.tx)\r\n}\r\n","import React from \"react\"\r\n\r\nexport default function Transaction(props) {\r\n  // I wasn't quite sure what information is important to list on transactions\r\n  const { hash, weight, size } = props.tx\r\n  return (\r\n    <tr>\r\n      <td>{hash}</td>\r\n      <td>{weight}</td>\r\n      <td>{size}</td>\r\n    </tr>\r\n  )\r\n}\r\n","import React from \"react\"\r\nexport default class PaginatedRows extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      perPage: 5,\r\n      currentPage: 0\r\n    }\r\n    this.goNext = this.changeCurrentPageByValue(1).bind(this)\r\n    this.goPrev = this.changeCurrentPageByValue(-1).bind(this)\r\n  }\r\n\r\n  changeCurrentPageByValue(val) {\r\n    return function() {\r\n      this.setState({\r\n        currentPage: this.state.currentPage + val\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { items, itemKey, SubComponent, componentKey } = this.props\r\n    const { perPage, currentPage } = this.state\r\n    const maxPages = Math.ceil(items.length / perPage)\r\n    const startIndex = currentPage * perPage\r\n    const endIndex = startIndex + perPage\r\n    return (\r\n      <>\r\n        {items.slice(startIndex, endIndex).map((item, index) => {\r\n          // we setup the itemObject how we want it to appear so we can apply it with spread operator to get a dynamic attribute name\r\n          // (the expected attribute for the object as expected by the component)\r\n          const itemObj = { key: item[itemKey], [componentKey]: item }\r\n          return <SubComponent {...itemObj} />\r\n        })}\r\n        <tr>\r\n          <td colSpan=\"100%\" style={{ textAlign: \"center\" }}>\r\n            <nav>\r\n              <button\r\n                disabled={currentPage === 0}\r\n                onClick={this.goPrev}\r\n                className=\"pure-button\">\r\n                Prev {perPage}\r\n              </button>\r\n              <span style={{ margin: \"2em\" }}>\r\n                Page {currentPage + 1} of {maxPages + 1}\r\n              </span>\r\n              <button\r\n                disabled={currentPage >= maxPages}\r\n                onClick={this.goNext}\r\n                className=\"pure-button\">\r\n                Next {perPage}\r\n              </button>\r\n            </nav>\r\n          </td>\r\n        </tr>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport { getBlockTransactions } from \"./../helpers/api\"\r\nimport Transaction from \"./transaction\"\r\nimport PaginatedRows from \"./paginatedRows\"\r\n\r\nexport default class Block extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      details: false\r\n    }\r\n    this.toggleDetails = this.toggleDetails.bind(this)\r\n  }\r\n\r\n  toggleDetails() {\r\n    const { hash } = this.props.block\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      details: !this.state.details\r\n    })\r\n    if (!this.state.transactions) {\r\n      getBlockTransactions(hash).then(txs =>\r\n        this.setState({\r\n          ...this.state,\r\n          transactions: txs\r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { hash, size, height, tx_count } = this.props.block\r\n    const { details, transactions = [] } = this.state\r\n    return (\r\n      <>\r\n        <tr>\r\n          <td>{hash}</td>\r\n          <td>{size}</td>\r\n          <td>{height}</td>\r\n          <td>{tx_count}</td>\r\n        </tr>\r\n        <tr>\r\n          <td colSpan=\"100%\" style={{ textAlign: \"center\" }}>\r\n            <button\r\n              onClick={this.toggleDetails}\r\n              className=\"pure-button\"\r\n              style={{ width: \"100%\" }}>\r\n              {details ? \"Hide\" : \"Show\"} Transactions\r\n            </button>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          {details && transactions && (\r\n            <td colSpan=\"4\">\r\n              Transactions:\r\n              <table className=\"pure-table pure-table-striped\">\r\n                <TransactionsHeader />\r\n                <tbody>\r\n                  <PaginatedRows\r\n                    items={transactions}\r\n                    itemKey=\"hash\"\r\n                    SubComponent={Transaction}\r\n                    componentKey=\"tx\"\r\n                  />\r\n                </tbody>\r\n              </table>\r\n            </td>\r\n          )}\r\n        </tr>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nfunction TransactionsHeader() {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>hash</th>\r\n        <th>weight</th>\r\n        <th>size</th>\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Block from \"./block\"\r\n\r\nexport default class Blocks extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n    const { blocks } = this.props\r\n    return (\r\n      <table className=\"pure-table pure-table-striped\">\r\n        <BlocksHeader />\r\n        <tbody>\r\n          {blocks &&\r\n            blocks.map(block => {\r\n              return <Block block={block} key={block.hash} />\r\n            })}\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nfunction BlocksHeader(props) {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>Hash</th>\r\n        <th>Size</th>\r\n        <th>Height</th>\r\n        <th>Transaction Count</th>\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n","import React, { Component } from \"react\"\nimport \"./App.css\"\nimport { getRecentBlocks } from \"./helpers/api\"\nimport Blocks from \"./components/blocks\"\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      blocks: null\n    }\n  }\n\n  componentDidMount() {\n    getRecentBlocks().then(blocks => {\n      this.setState({ blocks: blocks })\n    })\n  }\n\n  render() {\n    const { blocks } = this.state\n    return (\n      <section className=\"App\">{blocks && <Blocks blocks={blocks} />}</section>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}